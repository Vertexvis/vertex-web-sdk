{"version":3,"file":"angle.js","sourceRoot":"","sources":["../../../../geometry/src/angle.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AAIjC;;;;;;GAMG;AACH,MAAM,UAAU,UAAU,CAAC,CAAc,EAAE,CAAc;EACvD,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3C,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,mBAAmB,CAAC,CAAc,EAAE,CAAc;EAChE,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3C,OAAO,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,OAAc;EACtC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;AAChC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAc;EAC7C,OAAO,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,OAAc;EACtC,OAAO,OAAO,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;AACnC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,OAAc;EACtC,OAAO,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import * as Point from './point';\n\nexport type Angle = number;\n\n/**\n * Returns an `Angle` between two points, in radians.\n *\n * @param a The starting point.\n * @param b The ending point.\n * @returns An angle in radians.\n */\nexport function fromPoints(a: Point.Point, b: Point.Point): Angle {\n  const delta = Point.subtract(b, a);\n  const theta = Math.atan2(delta.y, delta.x);\n  return theta;\n}\n\n/**\n * Returns an `Angle` between two points, in degrees.\n *\n * An angle of 0 represents an upward vector, and increases in a clockwise\n * direction.\n *\n * @deprecated Use {@link fromPoints} instead.\n */\nexport function fromPointsInDegrees(a: Point.Point, b: Point.Point): Angle {\n  const delta = Point.subtract(b, a);\n  const theta = Math.atan2(delta.y, delta.x);\n  return normalize(toDegrees(theta) - 270);\n}\n\n/**\n * Normalizes the given angle, in degrees, to a number greater than or equal to 0 and less than 360.\n */\nexport function normalize(degrees: Angle): Angle {\n  return (degrees + 3600) % 360;\n}\n\n/**\n * Normalizes the given angle, in radians, to a number greater than or equal to 0 and less than 2 PI.\n */\nexport function normalizeRadians(radians: Angle): Angle {\n  return toRadians(normalize(toDegrees(radians)));\n}\n\n/**\n * Converts the given radians to degrees.\n */\nexport function toDegrees(radians: Angle): Angle {\n  return radians * (180 / Math.PI);\n}\n\n/**\n * Converts the given degrees to radians.\n */\nexport function toRadians(degrees: Angle): Angle {\n  return degrees * (Math.PI / 180);\n}\n"]}